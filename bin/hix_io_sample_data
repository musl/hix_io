#!/usr/bin/env ruby

require 'hix_io'

POSTS = {}

POSTS["A Post Ruby"] = <<EOF
<pre><code>
# vim: set nosta noet ts=4 sw=4 ft=ruby:
# encoding: UTF-8

require 'strelka'
require 'hix_io'

# Provides REST resources for the application.
#
class API < Strelka::App

	extend Configurability
	config_key :api

	extend Loggability
	log_to :hix_io

	plugins :routing, :negotiation, :parameters, :restresources

	# Defaults for Configurability.
	CONFIG_DEFAULTS = {}

	# Configurability hook. When the app is configured, build the REST resources.
	#
	def self::configure( section )
		resource( HixIO::Post, :readonly => true )
	end

end

</code></pre>
<p>And that was all we needed to flobber the blastogramator.</p>
EOF

POSTS["A Shell Script"] = <<EOF
<p>Whargarble garble garble:</p>
<pre><code>
#!/bin/bash

address=/home/bozo/daily-journal.txt

echo "Basename of /home/bozo/daily-journal.txt = `basename $address`"
echo "Dirname of /home/bozo/daily-journal.txt = `dirname $address`"
echo
echo "My own home is `basename ~/`."         # `basename ~` also works.
echo "The home of my home is `dirname ~/`."  # `dirname ~`  also works.

exit 0

EOF

POSTS["A bit of Python"] = <<EOF
<p>When the python got loose from the zoo, we ran this:</p>
<pre><code>
#!/usr/bin/env python
import itertools

def iter_primes():
     # an iterator of all numbers between 2 and +infinity
     numbers = itertools.count(2)

     # generate primes forever
     while True:
         # get the first number from the iterator (always a prime)
         prime = numbers.next()
         yield prime

         # this code iteratively builds up a chain of
         # filters...slightly tricky, but ponder it a bit
         numbers = itertools.ifilter(prime.__rmod__, numbers)

for p in iter_primes():
    if p > 1000:
        break
    print p

</code></pre>
EOF

POSTS["Go. Just Go."] = <<EOF
<pre><code data-language="go">
package main

import "fmt"

// calculate the fibonacci sequence with a closure
func fibonacci() (func() int) {
	n := 0
	l := 1
	return func() (int) {
		n,l = l,n+l
		return n
	}
}

func main() {
	f := fibonacci()
	for i := 0; i < 10; i++ {
		fmt.Println(f())
	}
}

</code></pre>
EOF

POSTS["Some Wierd Code"] = <<EOF
<pre><code data-language="none">
+++++ +++               Set Cell #0 to 8
[
	>++++               Add 4 to Cell #1; this will always set Cell #1 to 4
	[                   as the cell will be cleared by the loop
		>++             Add 4*2 to Cell #2
		>+++            Add 4*3 to Cell #3
		>+++            Add 4*3 to Cell #4
		>+              Add 4 to Cell #5
		<<<<-           Decrement the loop counter in Cell #1
	]                   Loop till Cell #1 is zero
	>+                  Add 1 to Cell #2
	>+                  Add 1 to Cell #3
	>-                  Subtract 1 from Cell #4
	>>+                 Add 1 to Cell #6
	[<]                 Move back to the first zero cell you find; this will
						be Cell #1 which was cleared by the previous loop
	<-                  Decrement the loop Counter in Cell #0
]                       Loop till Cell #0 is zero
 
The result of this is:
Cell No :   0   1   2   3   4   5   6
Contents:   0   0  72 104  88  32   8
Pointer :   ^
 
>>.                     Cell #2 has value 72 which is 'H'
>---.                   Subtract 3 from Cell #3 to get 101 which is 'e'
+++++ ++..+++.          Likewise for 'llo' from Cell #3
>>.                     Cell #5 is 32 for the space
<-.                     Subtract 1 from Cell #4 for 87 to give a 'W'
<.                      Cell #3 was set to 'o' from the end of 'Hello'
+++.----- -.----- ---.  Cell #3 for 'rl' and 'd'
>>+.                    Add 1 to Cell #5 gives us an exclamation point
>++.                    And finally a newline from Cell #6
</code></pre>
EOF

POSTS["A Plain HTML Post"] = <<EOF
<p>Nullam non tortor dolor. Morbi ultricies condimentum massa, mollis
dictum augue sollicitudin in. Suspendisse ac ipsum ac dui vulputate
pellentesque. Nulla blandit magna semper rutrum euismod. Nullam vel
aliquam <a href="#">tellus</a>, vel volutpat magna. In gravida quam eu nibh vehicula
bibendum. Ut pretium quam non lorem commodo feugiat. Sed condimentum
dolor at <i>magna</i> venenatis, ac malesuada arcu pretium. Donec ultricies
mauris risus, vehicula cursus nisi facilisis ut. Curabitur sodales
eros augue, vitae volutpat <b>diam</b> commodo ut. Curabitur interdum est
sapien, sit amet eleifend purus lacinia non. Phasellus in purus mattis,
adipiscing enim nec, dictum tellus. Cras bibendum gravida magna.</p>

<h2>A List</h2>
<ul>
	<li>The first.</li>
	<li>The second.</li>
	<li>The third.
		<ol>
			<li>The first.</li>
			<li>The second.</li>
			<li>The third.</li>
			<li>The fourth.</li>
		</ol>
	</li>
	<li>The fourth.</li>
	<li>The fifth.
		<ol>
			<li>The first.</li>
			<li>The second.</li>
			<li>The third.</li>
		</ol>
	</li>
</ul>

<h2>An Address</h2>
<address>somebody@example.org</address>

<h2>A Table</h2>

<table class="pure-table pure-table-striped">
	<thead>
		<tr>
			<th>Name</th>
			<th>Type</th>
			<th>Price</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Gorgonzola</td>
			<td>Soft</td>
			<td>$3.33 / oz</td>
		</tr>
		<tr>
			<td>Swiss</td>
			<td>Soft</td>
			<td>$1.95 / oz</td>
		</tr>
		<tr>
			<td>Parmesan</td>
			<td>Hard</td>
			<td>$2.83 / oz</td>
		</tr>
	</tbody>
</table>

<h2>A Form</h2>

<form class="pure-form pure-form-stacked">
	<fieldset>
		<legend>Give me your stuff:</legend>
		
		<label for="email">Email</label>
		<input id="email" type="email" placeholder="Email">
		
		<button type="submit" class="pure-button pure-button-primary">Send</button>
	</fieldset>
</form>

<p>Nullam non tortor dolor. Morbi ultricies condimentum massa, mollis
dictum augue sollicitudin in. Suspendisse ac ipsum ac dui vulputate
pellentesque. Nulla blandit magna semper rutrum euismod. Nullam vel
aliquam tellus, vel volutpat magna. In gravida quam eu nibh vehicula
bibendum. Ut pretium quam non lorem commodo feugiat. Sed condimentumg
dolor at magna venenatis, ac malesuada arcu pretium. Donec ultricies
mauris risus, vehicula cursus nisi facilisis ut. Curabitur sodales
eros augue, vitae volutpat diam commodo ut. Curabitur interdum est
sapien, sit amet eleifend purus lacinia non. Phasellus in purus mattis,
adipiscing enim nec, dictum tellus. Cras bibendum gravida magna.</p>
EOF

config = ARGV.shift || abort( "Usage: %s <config.yml> [count]" % [File.basename( $0 )] )
count = (ARGV.shift || 1).to_i

HixIO.load_config( config )
HixIO.log.level = :fatal

count.times do
	POSTS.each do |title,body|
		HixIO::Post.create( :title => title, :body => body, :published => true )
	end
end

%w[
http://slashdot.org/
http://eff.org/
http://kernel.org/
http://freebsd.org/
].each do |url|
	HixIO::URL.create( :url => url, :source_ip => '0.0.0.0' )
end



