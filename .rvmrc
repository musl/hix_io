#!/usr/bin/env bash

# This is an RVM Project .rvmrc file, used to automatically load the ruby
# development environment upon cd'ing into the directory

# First we specify our desired <ruby>[@<gemset>], the @gemset name is optional,
# Only full ruby name is supported here, for short names use:
#     echo "rvm use 2.1.2@hixio" > .rvmrc
environment_id="ruby-2.1.2@hixio"

# Uncomment the following lines if you want to verify rvm version per project
# rvmrc_rvm_version="1.25.28 (master)" # 1.10.1 seems like a safe start
# eval "$(echo ${rvm_version}.${rvmrc_rvm_version} | __rvm_awk -F. '{print "[[ "$1*65536+$2*256+$3" -ge "$4*65536+$5*256+$6" ]]"}' )" || {
#   echo "This .rvmrc file requires at least RVM ${rvmrc_rvm_version}, aborting loading."
#   return 1
# }

# First we attempt to load the desired environment directly from the environment
# file. This is very fast and efficient compared to running through the entire
# CLI and selector. If you want feedback on which environment was used then
# insert the word 'use' after --create as this triggers verbose mode.
if [[ -d "${rvm_path:-$HOME/.rvm}/environments"
	&& -s "${rvm_path:-$HOME/.rvm}/environments/$environment_id" ]]
then
	\. "${rvm_path:-$HOME/.rvm}/environments/$environment_id"
	for __hook in "${rvm_path:-$HOME/.rvm}/hooks/after_use"*
	do
		if [[ -f "${__hook}" && -x "${__hook}" && -s "${__hook}" ]]
		then \. "${__hook}" || true
		fi
	done
	unset __hook
	if (( ${rvm_use_flag:=1} >= 1 )) # display automatically
	then
		if [[ $- == *i* ]] # check for interactive shells
		then
			# show the user the ruby and gemset they are using in green
			printf "%b" "Using: $(tput setaf 2 2>/dev/null)$GEM_HOME$(tput sgr0 2>/dev/null)"
			echo
		else
			# don't use colors in non-interactive shells
			printf "%b" "Using: $GEM_HOME"
			echo
		fi
	fi
else
	# If the environment file has not yet been created, use the RVM CLI to select.
	rvm --create use  "$environment_id" || {
	echo "Failed to create RVM environment '${environment_id}'."
	return 1
}
fi

# setup the environment
if [[ -e ".env" ]]; then
	source .env
fi	

if [ -n "$TMUX" ]; then
	return 0
fi

# import our gems
filename=".gems"
if [[ -s "$filename" ]]; then
	rvm gemset import "$filename"
fi

